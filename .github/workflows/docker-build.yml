name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Initialize Go modules
      run: |
        # Only initialize if go.mod doesn't exist
        if [ ! -f "go.mod" ]; then
          go mod init github.com/dfoulkes/minio-exporter
        fi
        # Get the required dependencies
        go get github.com/minio/minio-go/v7@v7.0.95
        go get github.com/minio/madmin-go/v3@latest
        go get github.com/prometheus/client_golang@v0.9.4
        go get github.com/prometheus/common@v0.4.1
        go mod tidy

    - name: Run tests
      run: |
        go test -short

    - name: Build Go binary
      run: |
        CGO_ENABLED=0 go build -o minio_exporter -a -installsuffix cgo

    - name: Determine version and create tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main") ]]; then
          # Check if any tags exist
          if git tag -l | grep -q .; then
            # Get the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "Latest tag found: $LATEST_TAG"
            
            # Extract version number (remove 'v' prefix)
            VERSION=${LATEST_TAG#v}
            
            # Split version into components
            IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
            MAJOR=${VERSION_PARTS[0]:-0}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          else
            # No tags exist, check if VERSION file exists and use it as base
            if [[ -f "VERSION" ]]; then
              VERSION_FILE_CONTENT=$(cat VERSION | tr -d '[:space:]')
              echo "Using VERSION file content: $VERSION_FILE_CONTENT"
              # Use VERSION file content as base, but ensure it starts from v0.0.1 minimum
              if [[ "$VERSION_FILE_CONTENT" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                NEW_VERSION="v$VERSION_FILE_CONTENT"
              else
                NEW_VERSION="v0.0.1"
              fi
            else
              # No tags and no VERSION file, start from v0.0.1
              echo "No tags or VERSION file found, starting from v0.0.1"
              NEW_VERSION="v0.0.1"
            fi
          fi
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "is_new_version=true" >> $GITHUB_OUTPUT
          
          # Create and push new tag
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_VERSION" -m "Auto-increment version to $NEW_VERSION"
          git push origin "$NEW_VERSION"
          
          # Update VERSION file
          VERSION_WITHOUT_V=${NEW_VERSION#v}
          echo "$VERSION_WITHOUT_V" > VERSION
          git add VERSION
          git commit -m "Bump version to $NEW_VERSION" || true
          git push origin ${{ github.ref_name }} || true
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # If it's already a tag push, use that version
          VERSION="${{ github.ref_name }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_new_version=false" >> $GITHUB_OUTPUT
        else
          # For PRs or other events, use a dev version
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="dev-$SHORT_SHA"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_new_version=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable=${{ steps.version.outputs.is_new_version == 'true' }}
          type=ref,event=pr

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output version info
      run: |
        echo "Version: ${{ steps.version.outputs.version }}"
        echo "Is new version: ${{ steps.version.outputs.is_new_version }}"
        echo "Docker tags: ${{ steps.meta.outputs.tags }}"
